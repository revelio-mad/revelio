[project]
name = "revelio-mad"
authors = [
    { name = "NicolÃ² Di Domenico", email = "nicolo.didomenico@unibo.it" },
]
version = "1.0.0"
description = "A Modular and Effective Framework for Reproducible Training and Evaluation of Morphing Attack Detectors"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">= 3.8.1"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: GPU",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Typing :: Typed",
]
dependencies = [
    "pyyaml >= 6.0",
    "pydantic >= 2.2",
    "torch >= 2.0",
    "torchvision >= 0.15",
    "lightning >= 2.0",
    "numpy >= 1.24",
    "opencv-python >= 4.8",
    "scikit-learn >= 1.3.0",
]

[project.optional-dependencies]
wandb = ["wandb >= 0.15"]
tensorboard = ["tensorboard >= 2.14"]

[project.urls]
repository = "https://github.com/revelio-mad/revelio"

[tool.pytest.ini_options]
addopts = "--cov-report xml:coverage.xml --cov src --cov-fail-under 0 --cov-append"
pythonpath = ["src"]
testpaths = ["tests"]
junit_family = "xunit2"

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 0
exclude_lines = ['if TYPE_CHECKING:', 'pragma: no cover']

[tool.tox]
legacy_tox_ini = """
[tox]
requires =
    tox >= 4
envlist = test-py3{8,9,10}
isolated_build = true

[testenv]
deps = -r requirements-dev.txt
commands = pytest {posargs}
"""

[tool.isort]
add_imports = ["from __future__ import annotations"]

[tool.black]
line-length = 120
target-versions = ["py38", "py39", "py310"]

[tool.flake8]
max-line-length = 120
select = "F,E,W,B,B901,B902,B903"
ignore = ["E722", "B001"]
per-file-ignores = ["*/__init__.py: F401, F403"]

[tool.pylint]
extension-pkg-whitelist = ["numpy", "torch", "cv2", "pydantic", "scipy"]
jobs = 0

[tool.pylint.'MESSAGES CONTROL']
enable = "c-extension-no-member"

[tool.pylint.'FORMAT']
ignore-long-lines = "^\\s*(# )?.*['\"]?<?https?://\\S+>?"
max-line-length = 120
max-module-lines = 1000

[tool.pylint.'TYPECHECK']
generated-members = ["numpy.*", "np.*", "argparse.Namespace"]
mixin-class-rgx = ".*Mix[Ii]n"
ignore-mixin-members = "yes"
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "argparse.Namespace",
    "numpy",
    "torch",
]
ignored-modules = ["numpy", "torch", "scipy"]

[tool.pylint.'VARIABLES']
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions = ["BaseException", "Exception"]

[tool.mypy]
disallow_any_unimported = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["cv2", "matplotlib", "tensorflow", "sklearn"]
ignore_missing_imports = true
